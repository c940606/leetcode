from typing import List


class Solution:
    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:
        from functools import lru_cache
        n = len(jobDifficulty)
        if n < d:
            return -1

        @lru_cache(None)
        def dfs(i, d):
            if d == 1:
                return max(jobDifficulty[i:])
            if n - i < d:
                return float("inf")
            res = float("inf")
            cur = 0
            for j in range(i, n - 1):
                cur = max(cur, jobDifficulty[j])
                res = min(res, cur + dfs(j + 1, d - 1))
            return res

        return dfs(0, d)


a = Solution()
print(a.minDifficulty(jobDifficulty=[6, 5, 4, 3, 2, 1], d=2))
print(a.minDifficulty(jobDifficulty=[1, 1, 1], d=3))
print(a.minDifficulty(jobDifficulty=[7, 1, 7, 1, 7, 1], d=3))
print(a.minDifficulty(jobDifficulty=[11, 111, 22, 222, 33, 333, 44, 444], d=6))
print(a.minDifficulty(
    [999, 1000, 999, 999, 999, 1000, 999, 999, 999, 1000, 999, 999, 999, 999, 999, 1000, 1000, 999, 999, 999, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 999, 999, 1000, 1000, 1000, 999, 999, 1000, 999, 999, 999, 1000, 999, 1000,
     999, 1000, 1000, 1000, 1000, 1000, 1000, 999, 999, 1000, 999, 999, 999, 999, 1000, 999, 1000, 1000, 1000, 999,
     1000, 999, 999, 1000, 1000, 1000, 1000, 999, 1000, 999, 1000, 999, 999, 999, 999, 1000, 1000, 999, 999, 999, 999,
     999, 1000, 1000, 999, 1000, 1000, 1000, 999, 1000, 999, 1000, 1000, 999, 1000, 1000, 999, 999, 1000, 1000, 999,
     1000, 999, 1000, 999, 999, 1000, 1000, 1000, 999, 1000, 1000, 1000, 1000, 999, 999, 1000, 999, 1000, 1000, 999,
     999, 1000, 999, 999, 999, 999, 1000, 999, 999, 999, 1000, 999, 999, 1000, 999, 1000, 1000, 1000, 999, 999, 999,
     999, 1000, 999, 999, 1000, 1000, 999, 999, 1000, 1000, 999, 999, 1000, 999, 1000, 1000, 1000, 1000, 1000, 1000,
     999, 999, 999, 999, 999, 999, 999, 1000, 999, 999, 1000, 999, 999, 999, 999, 999, 999, 999, 999, 1000, 999, 1000,
     999, 1000, 999, 1000, 1000, 1000, 999, 999, 1000, 1000, 1000, 999, 999, 1000, 999, 999, 999, 1000, 999, 1000, 999,
     1000, 1000, 999, 1000, 1000, 999, 1000, 1000, 999, 999, 999, 999, 1000, 999, 999, 999, 1000, 1000, 1000, 1000, 999,
     1000, 999, 1000, 1000, 999, 999, 1000, 999, 999, 999, 1000, 999, 999, 999, 1000, 1000, 999, 1000, 1000, 1000, 999,
     999, 1000, 1000, 999, 999, 999, 999, 1000, 1000, 999, 999, 1000, 999, 1000, 999, 999, 999, 999, 1000, 999, 1000,
     1000, 999, 999, 999, 999, 1000, 999, 1000, 999, 1000, 1000, 1000, 999, 999, 1000, 999, 1000, 1000, 1000, 1000,
     1000, 1000, 999, 999, 999, 1000, 1000, 1000, 999, 999, 1000],
    10))
